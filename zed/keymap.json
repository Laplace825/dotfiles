// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
    {
        "context": "TabSwitcher",
        "bindings": {
            "alt-k": "menu::SelectLast",
            // "alt-k": "menu::SelectPrev",
            "alt-j": "menu::SelectNext"
        }
    },
    {
        "context": "Picker",
        "bindings": {
            "alt-k": "menu::SelectPrevious",
            "alt-j": "menu::SelectNext"
        }
    },
    {
        "context": "ProjectPanel && not_editing",
        "bindings": {
            "a": "project_panel::NewFile",
            "A": "project_panel::NewDirectory",
            "r": "project_panel::Rename",
            "d": "project_panel::Trash",
            "D": "project_panel::Delete",
            "x": "project_panel::Cut",
            "y": "project_panel::Copy",
            "p": "project_panel::Paste",
            "l": "project_panel::OpenPermanent",
            "ctrl-d": "project_panel::SelectNextDirectory",
            "ctrl-u": "project_panel::SelectPrevDirectory",
            // Navigate between panel
            "ctrl-h": "workspace::ActivatePaneLeft",
            "ctrl-l": "workspace::ActivatePaneRight",
            "ctrl-k": "workspace::ActivatePaneUp",
            "ctrl-j": "workspace::ActivatePaneDown",
            "space d p": "project_panel::RemoveFromProject",
            "space a p": "workspace::AddFolderToProject",
            "space e": "workspace::ToggleLeftDock"
        }
    },
    {
        "context": "Editor && vim_mode == normal && !VimWaiting && !menu",
        "bindings": {
            // put key-bindings here if you want them to work only in normal mode
            // Window movement bindings
            // Ctrl jklk to move between panes
            "ctrl-h": "workspace::ActivatePaneLeft",
            "ctrl-l": "workspace::ActivatePaneRight",
            "ctrl-k": "workspace::ActivatePaneUp",
            "ctrl-j": "workspace::ActivatePaneDown",
            "space m p": "markdown::OpenPreviewToTheSide",
            "alt-h": "pane::SplitUp",
            "alt-c": "pane::CloseAllItems",
            "alt-v": "pane::SplitRight",

            "space a p": "workspace::AddFolderToProject",

            "space e": "workspace::ToggleLeftDock",

            // vim mode redo
            "U": "vim::Redo",
            "space g g": [
                "task::Spawn",
                { "task_name": "Start Lazygit", "reveal_target": "center" }
            ],

            // open terminal
            "alt-1": "workspace::NewCenterTerminal",
            "alt-2": "terminal_panel::ToggleFocus",
            "alt-3": ["workspace::SendKeystrokes", "alt-v alt-1"],

            "space b b": "tab_switcher::Toggle",
            "space b r": "pane::CloseItemsToTheRight",
            "space b l": "pane::CloseItemsToTheLeft",

            // +LSP
            "space c r": "editor::Rename",
            "space g d": "editor::GoToDefinition",
            "space g D": "editor::GoToDefinitionSplit",
            "space g i": "editor::GoToImplementation",
            "space g I": "editor::GoToImplementationSplit",
            "space g t": "editor::GoToTypeDefinition",
            "space g T": "editor::GoToTypeDefinitionSplit",
            "space g r": "editor::FindAllReferences",
            "space l i": "editor::ToggleInlayHints",
            "space l c": "editor::ShowSignatureHelp",

            // Symbol search
            "space s s": "outline::Toggle",
            "space f s": "project_symbols::Toggle",
            // Diagnostic
            "space x x": "diagnostics::Deploy"
        }
    },
    {
        "context": "Terminal",
        "bindings": {
            "ctrl-h": "workspace::ActivatePaneLeft",
            "ctrl-k": "workspace::ActivatePaneUp",
            "ctrl-j": "workspace::ActivatePaneDown",
            "alt-2": "terminal_panel::ToggleFocus",
            "alt-c": "pane::CloseAllItems"
        }
    },
    {
        "context": "Editor && (vim_mode == normal || vim_mode == visual) && !VimWaiting && !menu",
        "bindings": {
            "alt-k": "editor::MoveLineUp",
            "alt-j": "editor::MoveLineDown",
            "alt-.": "editor::Indent",
            "alt-,": "editor::Outdent"
        }
    }
]
